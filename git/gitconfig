[user]
	name = Guilherme Revolta
	email = guilhermerevolta@gmail.com
[github]
  user = revoltaxz
[core]
  editor = vim
  excludesfile = ~/.gitignore
  autocrlf = input
  pager = bash -lc 'diff-highlight | less -r' -
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[color "diff-highlight"]
  oldNormal = "red bold"
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[push]
  default = current
[pull]
  rebase = true
; http://naleid.com/blog/2013/10/29/how-to-use-p4merge-as-a-3-way-merge-tool-with-git-and-tower-dot-app
; http://pempek.net/articles/2014/04/18/git-p4merge/
[mergetool "p4merge"]
  cmd = /Applications/p4merge.app/Contents/MacOS/p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  keepTemporaries = false
  trustExitCode = false
  keepBackup = false
[merge]
	tool = opendiff
[branch]
  autosetuprebase = always
[branch "master"]
  rebase = true
[grep]
  extendRegexp = true
  lineNumber = true
[diff]
	tool = opendiff
[difftool "diffmerge"]
  cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
; [mergetool "diffmerge"]
  ; cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
  ; trustExitCode = true
[alias]
  aa = !git add --all && git status -sb
  ca = commit --amend
  ci = commit -a
  co = checkout
  cl = clone
  st = status
  d = difftool -y
  df = diff --color --color-words --abbrev
  l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ll = log --graph --decorate --pretty=oneline --abbrev-commit --all
  g = grep --break --heading --line-number
  create-branch = !sh -c 'git update-develop && git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
  delete-branch = !sh -c 'git push origin :refs/heads/$1 && git remote prune origin && git branch -D $1' -
  update-branch = pull --rebase
  rebase-branch = pull --rebase origin develop
  update-develop = !sh -c 'git checkout develop && git update-branch' -
  checkout-branch = !sh -c 'git fetch && git checkout -b $1 origin/$1' -
  list-branches = branch -ai
  squash = rebase -i @{u}
  up = !sh -c 'git fetch && git pull --rebase' -
  cp = cherry-pick
[difftool]
	prompt = false

